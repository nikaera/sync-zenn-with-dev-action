{"version":3,"file":"index.js","mappingssources":["../webpack/runtime/compat",".././lib/main.js"],"sourcesContent":["\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core = __importStar(require(\"@actions/core\"));\nconst wait_1 = require(\"./wait\");\nconst path_1 = __importDefault(require(\"path\"));\nconst dev_client_1 = require(\"./dev_client\");\nconst zenn_article_service_1 = require(\"./zenn_article_service\");\nfunction run() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const maxRetryCount = 10;\n        const devClient = new dev_client_1.DEVClient(core.getInput('api_key', { required: true }));\n        const zennArticleService = new zenn_article_service_1.ZennArticleService();\n        const articleDir = core.getInput('articles', { required: false });\n        const titleFormat = core.getInput('title_format', { required: false });\n        const modifiedFilePath = core.getInput('added_modified_filepath', {\n            required: false\n        });\n        const updateAll = core.getInput('update_all', {\n            required: false\n        });\n        const isUpdateAll = updateAll.toLowerCase() === 'true';\n        core.info(`update_all: ${updateAll}`);\n        try {\n            const markdownFilePaths = yield zennArticleService.getMarkdownFileList(articleDir, modifiedFilePath, isUpdateAll);\n            core.info(`[markdown files]\\n${markdownFilePaths.join('\\n')}\\n`);\n            const devtoArticles = [];\n            const newlySyncedArticles = [];\n            for (const filePath of markdownFilePaths) {\n                const article = yield zennArticleService.parse(filePath);\n                const request = zennArticleService.createArticleRequest(article, {\n                    titleFormat\n                });\n                const username = core.getInput('username', { required: false });\n                if (username) {\n                    const basename = path_1.default.basename(filePath, '.md');\n                    request.article.canonical_url = `https://zenn.dev/${username}/articles/${basename}`;\n                }\n                let retryCount = 0;\n                const devArticleId = article.header.dev_article_id;\n                if (devArticleId !== undefined) {\n                    while (retryCount < maxRetryCount) {\n                        try {\n                            const response = yield devClient.updateArticle(devArticleId, request);\n                            if (response !== null) {\n                                devtoArticles.push(response);\n                            }\n                            break;\n                        }\n                        catch (err) {\n                            if (err instanceof Error) {\n                                core.error(err.message);\n                            }\n                        }\n                        finally {\n                            // There is a limit of 30 requests per 30 seconds.\n                            // https://docs.forem.com/api/#operation/updateArticle\n                            yield (0, wait_1.wait)(1 * 1000);\n                            retryCount++;\n                        }\n                    }\n                }\n                else {\n                    while (retryCount < maxRetryCount) {\n                        try {\n                            const response = yield devClient.createArticle(request);\n                            if (response !== null) {\n                                yield zennArticleService.writeDEVArticleIDToFile(filePath, article, response.id);\n                            }\n                            if (response !== null) {\n                                devtoArticles.push(response);\n                                newlySyncedArticles.push(filePath);\n                            }\n                            break;\n                        }\n                        catch (err) {\n                            if (err instanceof Error) {\n                                core.error(err.message);\n                            }\n                        }\n                        finally {\n                            // There is a limit of 10 requests per 30 seconds.\n                            // https://docs.forem.com/api/#operation/createArticle\n                            yield (0, wait_1.wait)(3 * 1000);\n                            retryCount++;\n                        }\n                    }\n                }\n            }\n            core.setOutput('articles', JSON.stringify(devtoArticles, undefined, 2));\n            if (newlySyncedArticles.length > 0) {\n                core.setOutput('newly-sync-articles', newlySyncedArticles.join(' '));\n            }\n        }\n        catch (err) {\n            core.error(JSON.stringify(err));\n            if (err instanceof Error) {\n                core.setFailed(err.message);\n            }\n        }\n    });\n}\nvoid run();\n"],"names":[],"sourceRoot":""}